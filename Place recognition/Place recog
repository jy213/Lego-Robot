#!/usr/bin/env python
# By Jacek Zienkiewicz and Andrew Davison, Imperial College London, 2014
# Based on original C code by Adrien Angeli, 2009

from __future__ import print_function 
from __future__ import division                              

import numpy as np
import time  
import brickpi3 
import random
import os

WHEEL_RADIUS = 2.8
AXIS_RADIUS = 6.6

BP = brickpi3.BrickPi3() # Create an instance of the BrickPi3 class. BP will be the BrickPi3 object.

BP.set_sensor_type(BP.PORT_4, BP.SENSOR_TYPE.NXT_ULTRASONIC)

def get_sonar_value():
    while True:
        try:
            value = BP.get_sensor(BP.PORT_4)
            # print(value) 
            return value # print the distance in CM
        except brickpi3.SensorError as error:
            pass

# Location signature class: stores a signature characterizing one location
class LocationSignature:
    def __init__(self, no_bins = 140):
        self.sig = [0] * no_bins
        
    def print_signature(self):
        for i in range(len(self.sig)):
            print (self.sig[i])

# --------------------- File management class ---------------
class SignatureContainer():
    def __init__(self, size = 5):
        self.size = size; # max number of signatures that can be stored
        self.filenames = []
        
        # Fills the filenames variable with names like loc_%%.dat 
        # where %% are 2 digits (00, 01, 02...) indicating the location number. 
        for i in range(self.size):
            self.filenames.append('loc_{0:02d}.dat'.format(i))

    # Get the index of a filename for the new signature. If all filenames are 
    # used, it returns -1;
    def get_free_index(self):
        n = 0
        while n < self.size:
            if (os.path.isfile(self.filenames[n]) == False):
                break
            n += 1
            
        if (n >= self.size):
            return -1
        else:    
            return n
 
    # Delete all loc_%%.dat files
    def delete_loc_files(self):
        print ("STATUS:  All signature files removed.")
        for n in range(self.size):
            if os.path.isfile(self.filenames[n]):
                os.remove(self.filenames[n])
            
    # Writes the signature to the file identified by index (e.g, if index is 1
    # it will be file loc_01.dat). If file already exists, it will be replaced.
    def save(self, signature, index):
        filename = self.filenames[index]
        if os.path.isfile(filename):
            os.remove(filename)
            
        f = open(filename, 'w')

        for i in range(len(signature.sig)):
            s = str(signature.sig[i]) + "\n"
            f.write(s)
        f.close()

    # Read signature file identified by index. If the file doesn't exist
    # it returns an empty signature.
    def read(self, index):
        ls = LocationSignature()
        filename = self.filenames[index]
        if os.path.isfile(filename):
            f = open(filename, 'r')
            for i in range(len(ls.sig)):
                s = f.readline()
                if (s != ''):
                    ls.sig[i] = int(s)
            f.close()
        else:
            print ("WARNING: Signature does not exist.")
        
        return ls
        
# FILL IN: spin robot or sonar to capture a signature and store it in ls
def characterize_location(ls):
    BP.offset_motor_encoder(BP.PORT_A, BP.get_motor_encoder(BP.PORT_A))
    BP.offset_motor_encoder(BP.PORT_D, BP.get_motor_encoder(BP.PORT_D))
    BP.set_motor_dps(BP.PORT_A, 80)
    BP.set_motor_dps(BP.PORT_D, -80)
    
    i = 0
    
    while True:
        encoder = BP.get_motor_encoder(BP.PORT_A)
        if(encoder == 7):
            ls.sig[i] = get_sonar_value()
            i += 1
            print(i)  
            BP.offset_motor_encoder(BP.PORT_A, BP.get_motor_encoder(BP.PORT_A))
            BP.offset_motor_encoder(BP.PORT_D, BP.get_motor_encoder(BP.PORT_D))
        if i==len(ls.sig):
            break
        
        
    BP.set_motor_dps(BP.PORT_A, 0)
    BP.set_motor_dps(BP.PORT_D, 0)    
        

     

      
        
    
    # for i in range(len(ls.sig)):
    #     ls.sig[i] = get_sonar_value()
    #     time.sleep(0.026)
    # BP.set_motor_dps(BP.PORT_A, 0)
    # BP.set_motor_dps(BP.PORT_D, 0)
    


    
    # start_time = time.time()
    # while True:
    #     encoder = BP.get_motor_encoder(BP.PORT_A)
    #     if encoder > 1000:
    #         end_time = time.time()
    #         BP.set_motor_dps(BP.PORT_A, 0)
    #         BP.set_motor_dps(BP.PORT_D, 0)
    #         print("time,",end_time - start_time)
    #         break
    # ls.print_signature()
            


# FILL IN: compare two signatures
def compare_signatures(ls1, ls2):
    dist = 0
    for i in range(140):
        dist += (ls1.sig[i] - ls2.sig[i])**2
    return dist

def compare_histogram(histogram1, histogram2):
    bins = set(histogram1.keys()) | set(histogram2.keys())
    freq1 = np.array([histogram1.get(bin, 0) for bin in bins])
    freq2 = np.array([histogram2.get(bin, 0) for bin in bins])

    # calculate the Chi-Square distance
    chisq = np.sum((freq1 - freq2) ** 2 / (freq1 + freq2 + 1e-10)) / 2
    return(chisq)

# This function characterizes the current location, and stores the obtained 
# signature into the next available file.
def learn_location():
    ls = LocationSignature()
    characterize_location(ls)
    idx = signatures.get_free_index()
    if (idx == -1): # run out of signature files
        print ("\nWARNING:")
        print ("No signature file is available. NOTHING NEW will be learned and stored.")
        print ("Please remove some loc_%%.dat files.\n")
        return
    
    signatures.save(ls,idx)
    print("STATUS:  Location " , str(idx) , " learned and saved.")

# This function tries to recognize the current location.
# 1.   Characterize current location
# 2.   For every learned locations
# 2.1. Read signature of learned location from file
# 2.2. Compare signature to signature coming from actual characterization
# 3.   Retain the learned location whose minimum distance with
#      actual characterization is the smallest.
# 4.   Display the index of the recognized location on the screen

def recognize_location():
    ls_obs = LocationSignature()
    characterize_location(ls_obs)
    smallest = 1000000000000
    smallest_index = -1
    # FILL IN: COMPARE ls_read with ls_obs and find the best match
    for idx in range(signatures.size):
        print ("STATUS:  Comparing signature " + str(idx) + " with the observed signature.")
        ls_read = signatures.read(idx)
        dist = compare_signatures(ls_obs, ls_read)
        print("calculated:",dist)
        if dist <= smallest:
            print("smaller!")
            smallest = dist
            smallest_index = idx
    
    print("the recognized position is: ", str(smallest_index))

    return smallest_index

def place_recog():
    ls_obs = LocationSignature()
    characterize_location(ls_obs)
    histogram_obs = {}
    for item in ls_obs.sig:
        if item in histogram_obs:
            histogram_obs[item] += 1
        else:
            histogram_obs[item] = 1
    print("obs",histogram_obs)

    for idx in range(signatures.size):
        ls_read = signatures.read(idx)
        histogram_read = {}
        for item in ls_read.sig:
            if item in histogram_read:
                histogram_read[item] += 1
            else:
                histogram_read[item] = 1
        print('read',histogram_read)

        print("position:",idx, compare_histogram(histogram_obs, histogram_read))


# def place_recognize():
#     ls_obs = LocationSignature()
#     characterize_location(ls_obs)
#     ls_obs_sorted = ls_obs.sig
#     print("ls_obs_sorted:",ls_obs_sorted)
#     smallest = 1000000000000
#     smallest_index = -1
#     ls_obs_min = -1
#     ls_obs_max = -1
#     ls_read_min = -1
#     ls_read_max = -1
#     # FILL IN: COMPARE ls_read with ls_obs and find the best match
#     for idx in range(signatures.size):
#         print ("STATUS:  Comparing signature " + str(idx) + " with the observed signature.")
#         ls_read = signatures.read(idx)
#         ls_read_sorted = ls_read.sig.sort()
#         dist = compare_signatures(ls_obs_sorted, ls_read_sorted)
#         print("calculated:",dist)
#         if dist <= smallest:
#             print("smaller!")
#             smallest = dist
#             smallest_index = idx
#             ls_obs_min = ls_obs_sorted[0]
#             ls_obs_max = ls_obs_sorted[len(ls_obs_sorted.sig)-1]
#             ls_read_min = ls_read_sorted[0]
#             ls_read_max = ls_read_sorted[len(ls_obs_sorted.sig)-1]

#     ls_read = signatures.read(smallest_index)
#     ls_read_min_index = ls_read.index(ls_read_min)
#     ls_read_max_index = ls_read.index(ls_read_max)
#     ls_obs_min_index = ls_obs.index(ls_obs_min)
#     ls_obs_max_index = ls_obs.index(ls_obs_max)
#     difference = ((ls_obs_max_index-ls_read_max_index) + (ls_obs_min_index-ls_read_min_index))/2 * 7
    
#     print("encoder difference:",difference)
#     if(difference>=0):
#         print("right")
#     else:
#         print("left")
#     return difference
    

# Prior to starting learning the locations, it should delete files from previous
# learning either manually or by calling signatures.delete_loc_files(). 
# Then, either learn a location, until all the locations are learned, or try to
# recognize one of them, if locations have already been learned.

# signatures = SignatureContainer(5)
# signatures.delete_loc_files()


if __name__== "__main__":
    try:
        try: 
            signatures = SignatureContainer(5)
            # learn_location()
            # recognize_location()
            place_recog()
        except IOError as error:
            print(error)
        time.sleep(0.02)
    except KeyboardInterrupt: # except the program gets interrupted by Ctrl+C on the keyboard.
        BP.reset_all()        # Un
# learn_location();
# recognize_location();
